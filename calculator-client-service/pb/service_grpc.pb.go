// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BasicCalculator_Add_FullMethodName      = "/calculator.BasicCalculator/Add"
	BasicCalculator_Subtract_FullMethodName = "/calculator.BasicCalculator/Subtract"
	BasicCalculator_Divide_FullMethodName   = "/calculator.BasicCalculator/Divide"
	BasicCalculator_Multiply_FullMethodName = "/calculator.BasicCalculator/Multiply"
)

// BasicCalculatorClient is the client API for BasicCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicCalculatorClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Subtract(ctx context.Context, in *SubtractRequest, opts ...grpc.CallOption) (*SubtractResponse, error)
	Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideResponse, error)
	Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyResponse, error)
}

type basicCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicCalculatorClient(cc grpc.ClientConnInterface) BasicCalculatorClient {
	return &basicCalculatorClient{cc}
}

func (c *basicCalculatorClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, BasicCalculator_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicCalculatorClient) Subtract(ctx context.Context, in *SubtractRequest, opts ...grpc.CallOption) (*SubtractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubtractResponse)
	err := c.cc.Invoke(ctx, BasicCalculator_Subtract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicCalculatorClient) Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DivideResponse)
	err := c.cc.Invoke(ctx, BasicCalculator_Divide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicCalculatorClient) Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiplyResponse)
	err := c.cc.Invoke(ctx, BasicCalculator_Multiply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicCalculatorServer is the server API for BasicCalculator service.
// All implementations must embed UnimplementedBasicCalculatorServer
// for forward compatibility
type BasicCalculatorServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Subtract(context.Context, *SubtractRequest) (*SubtractResponse, error)
	Divide(context.Context, *DivideRequest) (*DivideResponse, error)
	Multiply(context.Context, *MultiplyRequest) (*MultiplyResponse, error)
	mustEmbedUnimplementedBasicCalculatorServer()
}

// UnimplementedBasicCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedBasicCalculatorServer struct {
}

func (UnimplementedBasicCalculatorServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBasicCalculatorServer) Subtract(context.Context, *SubtractRequest) (*SubtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtract not implemented")
}
func (UnimplementedBasicCalculatorServer) Divide(context.Context, *DivideRequest) (*DivideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}
func (UnimplementedBasicCalculatorServer) Multiply(context.Context, *MultiplyRequest) (*MultiplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedBasicCalculatorServer) mustEmbedUnimplementedBasicCalculatorServer() {}

// UnsafeBasicCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicCalculatorServer will
// result in compilation errors.
type UnsafeBasicCalculatorServer interface {
	mustEmbedUnimplementedBasicCalculatorServer()
}

func RegisterBasicCalculatorServer(s grpc.ServiceRegistrar, srv BasicCalculatorServer) {
	s.RegisterService(&BasicCalculator_ServiceDesc, srv)
}

func _BasicCalculator_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicCalculatorServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicCalculator_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicCalculatorServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicCalculator_Subtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicCalculatorServer).Subtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicCalculator_Subtract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicCalculatorServer).Subtract(ctx, req.(*SubtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicCalculator_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicCalculatorServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicCalculator_Divide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicCalculatorServer).Divide(ctx, req.(*DivideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicCalculator_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicCalculatorServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicCalculator_Multiply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicCalculatorServer).Multiply(ctx, req.(*MultiplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicCalculator_ServiceDesc is the grpc.ServiceDesc for BasicCalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicCalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.BasicCalculator",
	HandlerType: (*BasicCalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BasicCalculator_Add_Handler,
		},
		{
			MethodName: "Subtract",
			Handler:    _BasicCalculator_Subtract_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _BasicCalculator_Divide_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _BasicCalculator_Multiply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	AdvancesCalculator_Exp_FullMethodName   = "/calculator.AdvancesCalculator/Exp"
	AdvancesCalculator_Power_FullMethodName = "/calculator.AdvancesCalculator/Power"
	AdvancesCalculator_Sin_FullMethodName   = "/calculator.AdvancesCalculator/Sin"
	AdvancesCalculator_Cos_FullMethodName   = "/calculator.AdvancesCalculator/Cos"
)

// AdvancesCalculatorClient is the client API for AdvancesCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdvancesCalculatorClient interface {
	Exp(ctx context.Context, in *ExpRequest, opts ...grpc.CallOption) (*ExpResponse, error)
	Power(ctx context.Context, in *PowerRequest, opts ...grpc.CallOption) (*PowerResponse, error)
	Sin(ctx context.Context, in *SinRequest, opts ...grpc.CallOption) (*SinResponse, error)
	Cos(ctx context.Context, in *CosRequest, opts ...grpc.CallOption) (*CosResponse, error)
}

type advancesCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAdvancesCalculatorClient(cc grpc.ClientConnInterface) AdvancesCalculatorClient {
	return &advancesCalculatorClient{cc}
}

func (c *advancesCalculatorClient) Exp(ctx context.Context, in *ExpRequest, opts ...grpc.CallOption) (*ExpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpResponse)
	err := c.cc.Invoke(ctx, AdvancesCalculator_Exp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advancesCalculatorClient) Power(ctx context.Context, in *PowerRequest, opts ...grpc.CallOption) (*PowerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PowerResponse)
	err := c.cc.Invoke(ctx, AdvancesCalculator_Power_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advancesCalculatorClient) Sin(ctx context.Context, in *SinRequest, opts ...grpc.CallOption) (*SinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SinResponse)
	err := c.cc.Invoke(ctx, AdvancesCalculator_Sin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advancesCalculatorClient) Cos(ctx context.Context, in *CosRequest, opts ...grpc.CallOption) (*CosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CosResponse)
	err := c.cc.Invoke(ctx, AdvancesCalculator_Cos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdvancesCalculatorServer is the server API for AdvancesCalculator service.
// All implementations must embed UnimplementedAdvancesCalculatorServer
// for forward compatibility
type AdvancesCalculatorServer interface {
	Exp(context.Context, *ExpRequest) (*ExpResponse, error)
	Power(context.Context, *PowerRequest) (*PowerResponse, error)
	Sin(context.Context, *SinRequest) (*SinResponse, error)
	Cos(context.Context, *CosRequest) (*CosResponse, error)
	mustEmbedUnimplementedAdvancesCalculatorServer()
}

// UnimplementedAdvancesCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedAdvancesCalculatorServer struct {
}

func (UnimplementedAdvancesCalculatorServer) Exp(context.Context, *ExpRequest) (*ExpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exp not implemented")
}
func (UnimplementedAdvancesCalculatorServer) Power(context.Context, *PowerRequest) (*PowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Power not implemented")
}
func (UnimplementedAdvancesCalculatorServer) Sin(context.Context, *SinRequest) (*SinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sin not implemented")
}
func (UnimplementedAdvancesCalculatorServer) Cos(context.Context, *CosRequest) (*CosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cos not implemented")
}
func (UnimplementedAdvancesCalculatorServer) mustEmbedUnimplementedAdvancesCalculatorServer() {}

// UnsafeAdvancesCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdvancesCalculatorServer will
// result in compilation errors.
type UnsafeAdvancesCalculatorServer interface {
	mustEmbedUnimplementedAdvancesCalculatorServer()
}

func RegisterAdvancesCalculatorServer(s grpc.ServiceRegistrar, srv AdvancesCalculatorServer) {
	s.RegisterService(&AdvancesCalculator_ServiceDesc, srv)
}

func _AdvancesCalculator_Exp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvancesCalculatorServer).Exp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvancesCalculator_Exp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvancesCalculatorServer).Exp(ctx, req.(*ExpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvancesCalculator_Power_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvancesCalculatorServer).Power(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvancesCalculator_Power_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvancesCalculatorServer).Power(ctx, req.(*PowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvancesCalculator_Sin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvancesCalculatorServer).Sin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvancesCalculator_Sin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvancesCalculatorServer).Sin(ctx, req.(*SinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvancesCalculator_Cos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvancesCalculatorServer).Cos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvancesCalculator_Cos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvancesCalculatorServer).Cos(ctx, req.(*CosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdvancesCalculator_ServiceDesc is the grpc.ServiceDesc for AdvancesCalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdvancesCalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.AdvancesCalculator",
	HandlerType: (*AdvancesCalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exp",
			Handler:    _AdvancesCalculator_Exp_Handler,
		},
		{
			MethodName: "Power",
			Handler:    _AdvancesCalculator_Power_Handler,
		},
		{
			MethodName: "Sin",
			Handler:    _AdvancesCalculator_Sin_Handler,
		},
		{
			MethodName: "Cos",
			Handler:    _AdvancesCalculator_Cos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
